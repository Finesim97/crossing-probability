% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/crossingprob.R
\name{crossingprob}
\alias{crossingprob}
\title{Crossing Probability}
\usage{
crossingprob(
  lowerboundaries = NULL,
  upperboundaries = NULL,
  method = c("auto", "ecdf1-mns2016", "ecdf1-new", "ecdf2-ks2001", "ecdf2-mn2017")
)
}
\arguments{
\item{lowerboundaries}{numeric vector with the lower boundaries (see
vector b in the details) between 0 and 1.
Defaults to \code{NULL}.}

\item{upperboundaries}{numeric vector with the upper boundaries (see
vector B in the details) between 0 and 1.
Defaults to \code{NULL}.}

\item{method}{algorithm to use, see details. Defaults to \code{"auto"}.}
}
\value{
A float giving the probability
\mjeqn{\pi_\text{cross}}{pi_cross} for the random variables
to stay within the boundaries.
}
\description{
Calculates the boundary crossing probability for a sequence of uniformly
distributed variables for either one- or two-sided boundaries.
\loadmathjax
}
\details{
For \mjeqn{n}{n} i.i.d. uniformly distributed random variables
\mjeqn{X_1, ..., X_n}{X1, ..., Xn}, for which \mjeqn{F}{F} is the
(continuous) cumulative distribution function, and
their order statistics \mjeqn{X_{(1)}, ..., X_{(n)}}{X(1), ..., X(n)}
the non-crossing probability between the lower boundaries
\mjeqn{\alpha_1, ..., \alpha_n}{alpha_1, ..., alpha_n} and upper boundaries
\mjeqn{\beta_1, ..., \beta_1}{beta_1, ..., beta_1} is:

\mjdeqn{\pi_\text{noncross}=P(\forall i : \alpha_i \leq X_{i} \leq \beta_i)
.}{pi_noncross=P(forall i: alpha_i < X(i) < beta_i ).}

The same non-crossing probability is given by the
order statistics \mjeqn{U_{(1)}, ..., U_{(n)}}{U(1), ..., U(n)} of an
sample of the i.i.d. uniformly distributed random variable
\mjeqn{U_i \sim U(0,1)}{Ui ~ (0,1)} and the boundaries transformed
by the distribution function \mjeqn{F}{F} with
\mjeqn{b_i=F(\alpha_i)}{bi=F(alpha_i)} and
\mjeqn{B_i=F(\beta_i)}{bi=F(beta_i)}, i. e.:

\mjdeqn{\pi_\text{noncross}=P(\forall i : b_i \leq U_{i} \leq B_i)
.}{pi_noncross=P(forall i: alpha_i < X(i) < beta_i ).}

This package provides algorithms to calculate the crossing probability
\mjeqn{\pi_\text{cross}=1-\pi_\text{noncross}}{p_cross = 1-pi_noncross}.
See \insertCite{NEWEST;textual}{crossingprobability} for
more details.

We provide an \code{Rcpp} interface to the following algorithms from
the C++ library \code{"crossing-probability"} by Amit Moscovich
\insertCite{repo}{crossingprobability}:

\itemize{
\item{\code{"ecdf1-mns2016"}}{\mjeqn{O(n^2)}{O(n^2)}
\insertCite{MNS2016}{crossingprobability}}
\item{\code{"ecdf1-new"}}{\mjeqn{O(n^2)}{O(n^2)}
\insertCite{NEWEST}{crossingprobability}}
\item{\code{"ecdf2-ks2001"}}{\mjeqn{O(n^3)}{O(n^3)}
\insertCite{KS2001}{crossingprobability}}
\item{\code{"ecdf2-mn2017"}}{\mjeqn{O(n^2 \log{n})}{O(n^2 log(n))}
\insertCite{MN2017}{crossingprobability}}
}

The default \code{"auto"} selects \code{"ecdf1-new"} for one-sided
boundaries and \code{"ecdf2-mn2017"} for two-sided uses. Note that
the crossing-probability is returned and not the non-crossing-probability.
}
\examples{
b <- c(0.1, 0.1, 0.3)
B <- c(0.25, 0.5, 0.7)
crossingprob(b, B)
}
\references{
\insertAllCited{}
}
